{"version":3,"sources":["components/DrawingRoom/DrawingPage/DrawingPage.js","components/Home/Home.js","Audio/Kids_Cheering.mp3","Audio/Fail_1.mp3","Audio/Bell_Transition.mp3","Audio/Whoosh_4.mp3","Audio/Cartoon_Accent.mp3","Audio/Pop_1.mp3","Audio/among-us-start-sound.mp3","components/DrawingRoom/InfoBar/InfoBar.js","components/DrawingRoom/Users/Users.js","components/DrawingRoom/Canvas/Canvas.js","components/DrawingRoom/Chat/Message/Message.js","components/DrawingRoom/Chat/Chat.js","App.js","index.js"],"names":["socket","Home","useState","name","setName","room","setRoom","joinBtn","setJoinBtn","hostRoom","useRef","useEffect","current","hostRoomString","length","chars","result","i","Math","floor","random","className","label","size","labelClass","type","onChange","event","target","value","onClick","preventDefault","to","InfoBar","currentUser","initialTime","currentDrawer","guessWord","replace","Users","users","map","points","icon","Canvas","strokeColor","sendDrawing","sendMove","userMove","userDraw","sendScale","userScale","canvasClear","canvasRef","contextRef","scale","isDrawing","setIsDrawing","canvas","width","parentNode","offsetWidth","height","offsetHeight","style","context","getContext","lineCap","strokeStyle","lineWidth","beginPath","clearRect","finishDrawing","x","y","lineTo","stroke","moveTo","onMouseDown","nativeEvent","offsetX","offsetY","onMouseMove","onMouseUp","ref","Message","message","user","text","isSentByCurrentUser","trim","toLowerCase","Chat","setMessage","sendMessage","messages","disableChat","index","readOnly","placeholder","onKeyPress","key","DrawingPage","location","useSound","Winning","volume","Win_Sound","Losing","Lose_Sound","Correct_Guess","Correct_Guess_Sound","Next_Round","Next_Round_Sound","Join_Room","Join_Sound","Leave_Room","Leave_Sound","Start_Game_Sound","Start_Sound","userIndex","roundTime","timer","setCurrentUser","setUsers","setMessages","setUserDraw","setUserMove","setUserScale","setCanvasClear","setInitialTime","startTimer","setStartTimer","disableButton","setDisableButton","setStrokeColor","setCurrentDrawer","setGuessWord","setDisableChat","querystring","parse","search","io","emit","error","alert","on","drawer","prev","newUserList","newIndex","wordToGuess","time","clearInterval","color","close","host","setTimeout","colorChange","fluid","hidden","App","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"uQAqBIA,E,6ECkCWC,EAhDF,WACT,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAA8BJ,mBAAS,wBAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACMC,EAAWC,iBAAO,MAExBC,qBAAW,WACPF,EAASG,QAAUC,EAAe,EAAG,0CACtC,IAEHF,qBAAW,WAEHH,EADDH,EACY,qBAEA,0BAEhB,CAACA,IAEJ,IAAMQ,EAAiB,SAACC,EAAQC,GAE5B,IADA,IAAIC,EAAS,GACJC,EAAIH,EAAQG,EAAI,EAAGA,IAAKD,GAAUD,EAAMG,KAAKC,MAAMD,KAAKE,SAAWL,EAAMD,SAClF,OAAOE,GAGX,OACI,qBAAKK,UAAU,qBAAf,SACI,sBAAKA,UAAU,qBAAf,UACI,oBAAIA,UAAU,kDAAd,4BACA,gCAAK,cAAC,IAAD,CAAUC,MAAM,OAAOC,KAAK,KAAKC,WAAW,aAAaC,KAAK,OAAOC,SAAW,SAACC,GAAD,OAAWvB,EAAQuB,EAAMC,OAAOC,UAArH,OACA,gCAAK,cAAC,IAAD,CAAUP,MAAM,6BAA6BC,KAAK,KAAKE,KAAK,OAAOC,SAAW,SAACC,GAAD,OAAWrB,EAAQqB,EAAMC,OAAOC,UAAnH,OAEIxB,EACI,cAAC,IAAD,CAAMyB,QAAU,SAAAH,GAAK,OAAMxB,EAAiC,KAAzBwB,EAAMI,kBAAyBC,GAAE,4BAAuB7B,EAAvB,iBAAoCE,GAAxG,SACI,wBAAQgB,UAAU,iBAAiBI,KAAK,SAAxC,SAAkDlB,MAItD,cAAC,IAAD,CAAMuB,QAAU,SAAAH,GAAK,OAAMxB,EAAiC,KAAzBwB,EAAMI,kBAAyBC,GAAE,4BAAuB7B,EAAvB,iBAAoCM,EAASG,SAAjH,SACI,wBAAQS,UAAU,kBAAkBI,KAAK,SAAzC,SAAmDlB,Y,6DC7ChE,MAA0B,0CCA1B,MAA0B,mCCA1B,MAA0B,4CCA1B,MAA0B,qCCA1B,MAA0B,2CCA1B,MAA0B,kCCA1B,MAA0B,iDCqC1B0B,G,OA/BC,SAAC,GAAkE,IAAhEC,EAA+D,EAA/DA,YAAa7B,EAAkD,EAAlDA,KAAM8B,EAA4C,EAA5CA,YAAaC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,UAG9D,OACI,eAAC,IAAD,CAAQhB,UAAU,eAAlB,UACI,cAAC,IAAD,UAAQ,wCAAWhB,OAEf6B,EAAY/B,OAASiC,EACjB,cAAC,IAAD,UAAQ,+CAAO,sBAAMf,UAAU,iBAAhB,uBAEf,cAAC,IAAD,UAAQ,+CAAQe,OAKpBF,EAAY/B,OAASiC,EACjB,cAAC,IAAD,UAAQ,6BAAI,sBAAMf,UAAU,4BAAhB,SAA6CgB,QAEzD,cAAC,IAAD,UAAQ,6BAAI,8BAAMA,EAAUC,QAAQ,OAAQ,aAGpD,cAAC,IAAD,UAAQ,gDAAQ,+BAAOH,SACvB,cAAC,IAAD,UACI,cAAC,IAAD,CAAMH,GAAI,IAAV,SACI,wBAAQX,UAAU,eAAlB,iC,QCMLkB,G,OA9BD,SAAC,GAA4B,IAA1BL,EAAyB,EAAzBA,YAAaM,EAAY,EAAZA,MAE1B,OACI,cAAC,IAAD,CAAQnB,UAAU,uBAAuBE,KAAK,IAA9C,SACI,sBAAKF,UAAU,gBAAf,UACI,oBAAIA,UAAU,cAAd,mBACA,cAAC,IAAD,CAAgBA,UAAU,eAA1B,SAEQmB,EAEI,8BACKA,EAAMC,KAAI,gBAAGtC,EAAH,EAAGA,KAAMuC,EAAT,EAASA,OAAT,OACPvC,IAAS+B,EAAY/B,KACjB,qBAAgBkB,UAAU,aAA1B,SACI,qBAAIA,UAAU,oCAAd,UAAkD,cAAC,IAAD,CAASsB,KAAK,QAAQtB,UAAU,gBAAlF,QAAyGlB,EAAzG,KAAiHuC,EAAjH,WADMvC,GAIV,qBAAgBkB,UAAU,aAA1B,SACI,qBAAIA,UAAU,iBAAd,kBAAuClB,EAAvC,KAA+CuC,EAA/C,WADMvC,QAKlB,cCyEjByC,G,OAhGA,SAAC,GAAgH,IAA9GC,EAA6G,EAA7GA,YAAaC,EAAgG,EAAhGA,YAAaC,EAAmF,EAAnFA,SAAUC,EAAyE,EAAzEA,SAAUC,EAA+D,EAA/DA,SAAUC,EAAqD,EAArDA,UAAWC,EAA0C,EAA1CA,UAAWjB,EAA+B,EAA/BA,YAAakB,EAAkB,EAAlBA,YAEnGC,EAAY3C,iBAAO,MACnB4C,EAAa5C,iBAAO,MACpB6C,EAAQ7C,iBAAO,MACrB,EAAkCR,oBAAS,GAA3C,mBAAOsD,EAAP,KAAkBC,EAAlB,KAEA9C,qBAAW,WACP,IAAM+C,EAASL,EAAUzC,QACzB8C,EAAOC,MAAQD,EAAOE,WAAWC,YAAY,GAC7CH,EAAOI,OAASJ,EAAOE,WAAWG,aAClCL,EAAOM,MAAML,MAAb,UAAwBD,EAAOE,WAAWC,YAAY,GAAtD,MACAH,EAAOM,MAAMF,OAAb,UAAyBJ,EAAOE,WAAWG,aAA3C,MAEA,IAAME,EAAUP,EAAOQ,WAAW,MAClCD,EAAQE,QAAU,QAClBF,EAAQG,YAAc,OACtBH,EAAQI,UAAY,EACpBf,EAAW1C,QAAUqD,IACtB,IAEHtD,qBAAW,WACP2C,EAAW1C,QAAQ0D,YACnBhB,EAAW1C,QAAQwD,YAAcvB,IAClC,CAACA,IAEJlC,qBAAW,WACJyC,IACCE,EAAW1C,QAAQ2D,UAAU,EAAG,EAAGlB,EAAUzC,QAAQ+C,MAAON,EAAUzC,QAAQkD,QAC9EU,OAEL,CAACpB,IAGJzC,qBAAW,WACP4C,EAAM3C,QAAUyC,EAAUzC,QAAQ+C,MAAQR,IAC3C,CAACA,IAEJxC,qBAAW,WACP,IAAO8D,EAAQxB,EAARwB,EAAGC,EAAKzB,EAALyB,EACVpB,EAAW1C,QAAQ+D,OAAOF,EAAIlB,EAAM3C,QAAS8D,EAAInB,EAAM3C,SACvD0C,EAAW1C,QAAQgE,WACpB,CAAC3B,IAEJtC,qBAAW,WACP,IAAO8D,EAAQzB,EAARyB,EAAGC,EAAK1B,EAAL0B,EACVpB,EAAW1C,QAAQiE,OAAOJ,EAAIlB,EAAM3C,QAAS8D,EAAInB,EAAM3C,WACxD,CAACoC,IAGJ,IAqBMwB,EAAgB,WAClBlB,EAAW1C,QAAQ0D,YACnBb,GAAa,IAIjB,OACI,cAAC,IAAD,CAAQpC,UAAU,aAAaE,KAAK,IAApC,SAEQW,EAAYsB,UACR,wBACInC,UAAU,yBACVyD,YAjCC,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACpBzB,EAAW1C,QAAQ0D,YACnB,IAAOU,EAAoBD,EAApBC,QAASC,EAAWF,EAAXE,QAChB3B,EAAW1C,QAAQiE,OAAOG,EAASC,GACnCxB,GAAa,GACbP,EAAUG,EAAUzC,QAAQ+C,OAC5BZ,EAASiC,EAASC,IA4BFC,YAxBP,SAAC,GAAqB,IAAnBH,EAAkB,EAAlBA,YACLC,EAAoBD,EAApBC,QAASC,EAAWF,EAAXE,QACZzB,IAGJF,EAAW1C,QAAQ+D,OAAOK,EAASC,GACnC3B,EAAW1C,QAAQgE,SACnB9B,EAAYkC,EAASC,KAkBLE,UAAWX,EACXY,IAAK/B,IAGT,wBAAQhC,UAAU,yBAAyB+D,IAAK/B,QCnErDgC,G,OAvBC,SAAC,GAAqC,IAAD,IAAlCC,QAAUC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,KAE3BC,GAAsB,EAO1B,OAJGF,IAL8C,EAAXpF,KAGbuF,OAAOC,gBAG5BF,GAAsB,GAItBA,EAEI,qBAAKpE,UAAU,gCAAf,SACI,oBAAGA,UAAU,oBAAb,UAAiC,sBAAMA,UAAU,gBAAhB,SAAiCkE,IAAlE,KAAiFC,OAGrF,qBAAKnE,UAAU,gCAAf,SACI,oBAAGA,UAAU,oBAAb,UAAiC,sBAAMA,UAAU,cAAhB,SAA+BkE,IAAhE,KAA+EC,SC0BhFI,G,OAxCF,SAAC,GAAmG,IAAjGN,EAAgG,EAAhGA,QAASO,EAAuF,EAAvFA,WAAYC,EAA2E,EAA3EA,YAAaC,EAA8D,EAA9DA,SAAU5F,EAAoD,EAApDA,KAAM+B,EAA8C,EAA9CA,YAAaE,EAAiC,EAAjCA,cAAe4D,EAAkB,EAAlBA,YAG1F,OACI,cAAC,IAAD,CAAQ3E,UAAU,sBAAsBE,KAAK,IAA7C,SACI,sBAAKF,UAAU,eAAf,UACI,oBAAIA,UAAU,aAAd,kBAEA,cAAC,IAAD,CAAgBA,UAAU,WAA1B,SACK0E,EAAStD,KAAK,SAAC6C,EAASW,GAAV,OAAoB,8BAAiB,cAAC,EAAD,CAASX,QAASA,EAASnF,KAAMA,KAAxC8F,QAG7C/D,EAAY/B,OAASiC,GAAiB4D,EAClC,sBAAM3E,UAAU,OAAhB,SACI,uBAAOA,UAAU,iBACb6E,UAAQ,EACRzE,KAAK,OACL0E,YAAY,iBACZtE,MAAOyD,EACP5D,SAAW,SAACC,GAAD,OAAWkE,EAAWlE,EAAMC,OAAOC,QAC9CuE,WAAa,SAACzE,GAAD,MAAyB,UAAdA,EAAM0E,IAAkBP,EAAYnE,GAAS,UAI7E,sBAAMN,UAAU,OAAhB,SACI,uBAAOA,UAAU,QACbI,KAAK,OACL0E,YAAY,qBACZtE,MAAOyD,EACP5D,SAAW,SAACC,GAAD,OAAWkE,EAAWlE,EAAMC,OAAOC,QAC9CuE,WAAa,SAACzE,GAAD,MAAyB,UAAdA,EAAM0E,IAAkBP,EAAYnE,GAAS,iBboStF2E,G,OAjTK,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAEnB,EAAoBC,YAASC,EAAS,CAACC,OAAQ,KAAxCC,EAAP,oBACA,EAAqBH,YAASI,EAAQ,CAACF,OAAQ,KAAxCG,EAAP,oBACA,EAA8BL,YAASM,EAAe,CAACJ,OAAQ,KAAxDK,EAAP,oBACA,EAA2BP,YAASQ,EAAY,CAACN,OAAQ,KAAlDO,EAAP,oBACA,EAAqBT,YAASU,EAAW,CAACR,OAAQ,KAA3CS,EAAP,oBACA,EAAsBX,YAASY,EAAY,CAACV,OAAQ,KAA7CW,EAAP,oBACA,EAAsBb,YAASc,EAAkB,CAACZ,OAAQ,KAAnDa,EAAP,oBAEMC,EAAY9G,iBAAO,GACnB+G,EAAY/G,iBAAO,IACnBgH,EAAQhH,iBAAO,MAErB,EAAwBR,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAsCJ,mBAAS,IAA/C,mBAAOgC,EAAP,KAAoByF,EAApB,KACA,EAA0BzH,mBAAS,IAAnC,mBAAOsC,GAAP,KAAcoF,GAAd,KACA,GAA8B1H,mBAAS,IAAvC,qBAAOoF,GAAP,MAAgBO,GAAhB,MACA,GAAgC3F,mBAAS,IAAzC,qBAAO6F,GAAP,MAAiB8B,GAAjB,MAEA,GAAgC3H,mBAAS,CAACuE,EAAG,KAAMC,EAAG,OAAtD,qBAAOzB,GAAP,MAAiB6E,GAAjB,MACA,GAAgC5H,mBAAS,CAACuE,EAAE,KAAMC,EAAE,OAApD,qBAAO1B,GAAP,MAAiB+E,GAAjB,MACA,GAAkC7H,mBAAS,MAA3C,qBAAOiD,GAAP,MAAkB6E,GAAlB,MACA,GAAsC9H,oBAAS,GAA/C,qBAAOkD,GAAP,MAAoB6E,GAApB,MAEA,GAAsC/H,mBAAS,MAA/C,qBAAOiC,GAAP,MAAoB+F,GAApB,MACA,GAAoChI,oBAAS,GAA7C,qBAAOiI,GAAP,MAAmBC,GAAnB,MACA,GAA0ClI,oBAAS,GAAnD,qBAAOmI,GAAP,MAAsBC,GAAtB,MAEA,GAAsCpI,mBAAS,SAA/C,qBAAO2C,GAAP,MAAoB0F,GAApB,MAGA,GAA0CrI,mBAAS,IAAnD,qBAAOkC,GAAP,MAAsBoG,GAAtB,MACA,GAAkCtI,mBAAS,IAA3C,qBAAOmC,GAAP,MAAkBoG,GAAlB,MACA,GAAsCvI,oBAAS,GAA/C,qBAAO8F,GAAP,MAAoB0C,GAApB,MAKA/H,qBAAW,WACP,MAAqBgI,IAAYC,MAAMrC,EAASsC,QAAzC1I,EAAP,EAAOA,KAAME,EAAb,EAAaA,KAYb,OAVAL,EAAS8I,IA7CA,kDA8CT1I,EAAQD,GACRG,EAAQD,GAERL,EAAO+I,KAAK,OAAQ,CAAE5I,OAAME,SAAQ,SAAC2I,GAC9BA,GACCC,MAAMD,MAIP,WACH5I,EAAQ,MACRE,EAAQ,SAGb,CAACiG,EAASsC,SAMblI,qBAAW,WA0EP,OAzEA6G,EAAU5G,QAAU,EAEpBZ,EAAOkJ,GAAG,WAAW,SAAC5D,GAClBuC,IAAY,SAAA9B,GAAQ,4BAAQA,GAAR,CAAkBT,UAG1CtF,EAAOkJ,GAAG,eAAe,YAAe,IAAZ3D,EAAW,EAAXA,KACxBoC,EAAepC,MAGnBvF,EAAOkJ,GAAG,iBAAiB,YAAiB,IAAdC,EAAa,EAAbA,OAC1BX,GAAiBW,MAGrBnJ,EAAOkJ,GAAG,YAAY,YAAgB,IAAb1G,EAAY,EAAZA,MACrBoF,GAASpF,MAGbxC,EAAOkJ,GAAG,SAAS,SAAClE,EAASC,GACzB6C,IAAY,SAAAsB,GAAI,kCACTA,GADS,IACH3E,EAAEO,EAASN,EAAEO,UAI9BjF,EAAOkJ,GAAG,SAAS,SAAClE,EAASC,GACzB8C,IAAY,SAAAqB,GAAI,kCACTA,GADS,IACH3E,EAAEO,EAASN,EAAEO,UAI9BjF,EAAOkJ,GAAG,UAAU,SAAC3F,GACjByE,GAAazE,MAGjBvD,EAAOkJ,GAAG,UAAU,WAChBjB,IAAe,GACfA,IAAe,MAGnBjI,EAAOkJ,GAAG,eAAe,WACrBjB,IAAe,MAGnBjI,EAAOkJ,GAAG,SAAS,WACfZ,IAAiB,GACjBJ,GAAeT,EAAU7G,SACzBwH,IAAc,MAGlBpI,EAAOkJ,GAAG,gBAAgB,YAAgC,IAA7BG,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SACtC9B,EAAU5G,QAAU0I,EACpB1B,GAASyB,MAGbrJ,EAAOkJ,GAAG,gBAAgB,SAACK,GACvBd,GAAac,MAGjBvJ,EAAOkJ,GAAG,cAAc,SAACM,GACrBC,cAAc/B,EAAM9G,SACpBsH,GAAesB,MAGnBxJ,EAAOkJ,GAAG,aAAa,SAACQ,GACpBnB,GAAemB,MAGnB1J,EAAOkJ,GAAG,WAAW,WACjBd,IAAc,MAKX,WACHpI,EAAO2J,WAGZ,IAGHhJ,qBAAW,WACPX,EAAOkJ,GAAG,YAAY,WAClBvC,SAEL,CAACA,IAEJhG,qBAAW,WACPX,EAAOkJ,GAAG,aAAa,WACnBrC,SAEL,CAACA,IAEJlG,qBAAW,WACPX,EAAOkJ,GAAG,qBAAqB,WAC3BnC,SAEL,CAACA,IAEJpG,qBAAW,WACPX,EAAOkJ,GAAG,kBAAkB,WACxBjC,SAEL,CAACA,IAEJtG,qBAAW,WACPX,EAAOkJ,GAAG,aAAa,WACnB/B,SAEL,CAACA,IAEJxG,qBAAW,WACPX,EAAOkJ,GAAG,cAAc,WACpB7B,SAEL,CAACA,IAEJ1G,qBAAW,WACPX,EAAOkJ,GAAG,cAAc,WACpB3B,SAEL,CAACA,IAmDJ5G,qBAAW,WACY,IAAhBwB,IAAqBgG,KACpBO,IAAe,GACfT,IAAe,GACfM,GAAe,SACfL,GAAeT,EAAU7G,SACzBZ,EAAO+I,KAAK,cAAevB,EAAU5G,QAAS4B,IAE3CN,EAAY0H,OACX5J,EAAO+I,KAAK,aAAc1G,IAC1BrC,EAAO+I,KAAK,oBACZ/I,EAAO+I,KAAK,aAIjB5G,GAAc,IACbuF,EAAM9G,QAAUiJ,YAAY,WACxB3B,GAAe/F,GAAc,KAC9B,QAIR,CAACA,GAAagG,GAAY3F,GAAON,EAAY0H,OAIhD,IAAME,GAAc,SAACJ,GACjBnB,GAAemB,GACf1J,EAAO+I,KAAK,WAAYW,IAO5B,OACI,qBAAKrI,UAAU,oBAAf,SACI,eAAC,IAAD,CAAcA,UAAU,0BAA0B0I,OAAO,EAAzD,UACI,cAAC,EAAD,CAAS7H,YAAaA,EAAa7B,KAAMA,EAAM8B,YAAaA,GAAaC,cAAeA,GAAcjC,KAAMkC,UAAWA,KAEvH,eAAC,IAAD,CAAQhB,UAAU,uBAAlB,UACI,cAAC,EAAD,CAAOa,YAAaA,EAAaM,MAAOA,KACxC,cAAC,EAAD,CAAQK,YAAaA,GAAaC,YAvE9B,SAACkC,EAASC,GAC1BjF,EAAO+I,KAAK,QAAS/D,EAASC,IAsE0ClC,SAnE3D,SAACiC,EAASC,GACvBjF,EAAO+I,KAAK,OAAQ/D,EAASC,IAkE+DjC,SAAUA,GAAUC,SAAUA,GAAUC,UA/DtH,SAACK,GACfvD,EAAO+I,KAAK,QAASxF,IA8DqIJ,UAAWA,GAAWjB,YAAaA,EAAakB,YAAaA,KAC3M,cAAC,EAAD,CAAMkC,QAASA,GAASO,WAAYA,GAAYC,YAxF5C,SAACnE,GACjBA,EAAMI,iBACgB,IAAnBuD,GAAQxE,SAERwE,GAAQK,gBAAkBtD,GAAUsD,eACnC3F,EAAO+I,KAAK,eAAgBvG,IAAO,kBAAMqD,GAAW,OACpD6C,IAAe,IAEf1I,EAAO+I,KAAK,cAAezD,IAAS,kBAAMO,GAAW,SAgF6BE,SAAUA,GAAU5F,KAAMA,EAAM+B,YAAaA,EAAaE,cAAeA,GAAcjC,KAAM6F,YAAaA,QAGpL9D,EAAY0H,KACR,wBAAQvI,UAAU,iBAAiB2I,OAAQ3B,GAAevG,QA5DrD,WACrBwG,IAAiB,GACjBJ,GAAeT,EAAU7G,SACzBwH,IAAc,GACdpI,EAAO+I,KAAK,SACZ/I,EAAO+I,KAAK,SACZ/I,EAAO+I,KAAK,eACZ/I,EAAO+I,KAAK,YAqDI,yBACA,KAIJ7G,EAAY/B,OAASiC,GAAcjC,MAAQkI,GACvC,gCACI,qBAAKhH,UAAS,gBAAmBS,QAAS,kBAAMgI,GAAY,YAC5D,sBAAMzI,UAAS,gBAAmBS,QAAS,kBAAMgI,GAAY,YAC7D,sBAAMzI,UAAS,cAAiBS,QAAS,kBAAMgI,GAAY,UAC3D,sBAAMzI,UAAS,eAAkBS,QAAS,kBAAMgI,GAAY,WAC5D,sBAAMzI,UAAS,gBAAmBS,QAAS,kBAAMgI,GAAY,YAC7D,sBAAMzI,UAAS,iBAAoBS,QAAS,kBAAMgI,GAAY,aAC9D,sBAAMzI,UAAU,iBAAiBS,QAAS,kBAAM9B,EAAO+I,KAAK,UAA5D,SAAsE,cAAC,IAAD,CAASpG,KAAK,YAAYpB,KAAK,YAEzG,YcnTT0I,EATH,WACR,OACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWnK,IACjC,cAAC,IAAD,CAAOiK,KAAK,eAAeE,UAAW9D,Q,qBCHlD+D,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.4b84576b.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react';\nimport {  MDBContainer, MDBRow, MDBIcon } from \"mdbreact\";\nimport querystring from 'query-string';\nimport io from 'socket.io-client';\nimport useSound from 'use-sound';\n\nimport Winning from '../../../Audio/Kids_Cheering.mp3';\nimport Losing from '../../../Audio/Fail_1.mp3';\nimport Correct_Guess from '../../../Audio/Bell_Transition.mp3';\nimport Next_Round from '../../../Audio/Whoosh_4.mp3';\nimport Join_Room from '../../../Audio/Cartoon_Accent.mp3';\nimport Leave_Room from '../../../Audio/Pop_1.mp3';\nimport Start_Game_Sound from '../../../Audio/among-us-start-sound.mp3';\n\nimport InfoBar from '../InfoBar/InfoBar';\nimport Users from '../Users/Users';\nimport Canvas from '../Canvas/Canvas';\nimport Chat from '../Chat/Chat';\n\nimport './DrawingPage.css';\n\nlet socket;\nconst ENDPOINT = 'https://skribbleguessbackend.ue.r.appspot.com/';\n\nconst DrawingPage = ({ location }) => {\n\n    const [Win_Sound] = useSound(Winning, {volume: 0.2});\n    const [Lose_Sound] = useSound(Losing, {volume: 0.2});\n    const [Correct_Guess_Sound] = useSound(Correct_Guess, {volume: 0.2});\n    const [Next_Round_Sound] = useSound(Next_Round, {volume: 0.2});\n    const [Join_Sound] = useSound(Join_Room, {volume: 0.2});\n    const [Leave_Sound] = useSound(Leave_Room, {volume: 0.2});\n    const [Start_Sound] = useSound(Start_Game_Sound, {volume: 0.2});\n\n    const userIndex = useRef(0);\n    const roundTime = useRef(75);\n    const timer = useRef(null);\n\n    const [name, setName] = useState('');\n    const [room, setRoom] = useState('');\n    const [currentUser, setCurrentUser] = useState('');\n    const [users, setUsers] = useState('');\n    const [message, setMessage] = useState('');\n    const [messages, setMessages] = useState([]);\n\n    const [userDraw, setUserDraw] = useState({x: null, y: null});\n    const [userMove, setUserMove] = useState({x:null, y:null});\n    const [userScale, setUserScale] = useState(null);\n    const [canvasClear, setCanvasClear] = useState(false);\n\n    const [initialTime, setInitialTime] = useState(null);\n    const [startTimer, setStartTimer] = useState(false);\n    const [disableButton, setDisableButton] = useState(false);\n\n    const [strokeColor, setStrokeColor] = useState(\"black\");\n\n\n    const [currentDrawer, setCurrentDrawer] = useState('');\n    const [guessWord, setGuessWord] = useState('');\n    const [disableChat, setDisableChat] = useState(false);\n\n\n\n    // When user joins a room\n    useEffect( () => {\n        const {name, room} = querystring.parse(location.search);\n\n        socket = io(ENDPOINT);\n        setName(name);\n        setRoom(room);\n\n        socket.emit('join', { name, room }, (error) => {\n            if(error){\n                alert(error);\n            }\n        });\n\n        return () => {\n            setName(null);\n            setRoom(null);\n        };\n\n    }, [location.search]);\n    //\n\n\n\n    // All socket listeners\n    useEffect( () => {\n        userIndex.current = 0;\n\n        socket.on('message', (message) => {\n            setMessages(messages => [...messages, message]);\n        });\n\n        socket.on('currentUser', ({ user }) => {\n            setCurrentUser(user);\n        });\n\n        socket.on('currentDrawer', ({ drawer }) => {\n            setCurrentDrawer(drawer);\n        });\n\n        socket.on('roomData', ({ users }) => {\n            setUsers(users);\n        });\n\n        socket.on('mouse', (offsetX, offsetY) => {\n            setUserDraw(prev => ({\n                ...prev, x:offsetX, y:offsetY\n            }));\n        });\n\n        socket.on('move2', (offsetX, offsetY) => {\n            setUserMove(prev => ({\n                ...prev, x:offsetX, y:offsetY\n            }));\n        });\n\n        socket.on('scale2', (scale) => {\n            setUserScale(scale);\n        });\n\n        socket.on('clear2', () => {\n            setCanvasClear(true);\n            setCanvasClear(false);\n        });\n\n        socket.on('canvasClear', () => {\n            setCanvasClear(false);\n        });\n\n        socket.on('time2', () => {\n            setDisableButton(true);\n            setInitialTime(roundTime.current);\n            setStartTimer(true);\n        });\n\n        socket.on('updateUsers2', ({ newUserList, newIndex }) => {\n            userIndex.current = newIndex;\n            setUsers(newUserList);\n        });\n\n        socket.on('setGuessWord', (wordToGuess) => {\n            setGuessWord(wordToGuess);\n        });\n\n        socket.on('changeTime', (time) => {\n            clearInterval(timer.current);\n            setInitialTime(time);\n        });\n\n        socket.on('setColor2', (color) => {\n            setStrokeColor(color);\n        });\n\n        socket.on('endGame', () => {\n            setStartTimer(false);\n        });\n\n\n        //When user leaves page, disconnect the socket\n        return () => {\n            socket.close();\n        };\n\n    }, []);\n    //\n\n    useEffect( () => {\n        socket.on('winSound', () => {\n            Win_Sound();\n        });\n    }, [Win_Sound]);\n\n    useEffect( () => {\n        socket.on('loseSound', () => {\n            Lose_Sound();\n        });\n    }, [Lose_Sound]);\n\n    useEffect( () => {\n        socket.on('correctGuessSound', () => {\n            Correct_Guess_Sound();\n        });\n    }, [Correct_Guess_Sound]);\n\n    useEffect( () => {\n        socket.on('nextRoundSound', () => {\n            Next_Round_Sound();\n        });\n    }, [Next_Round_Sound]);\n\n    useEffect( () => {\n        socket.on('joinSound', () => {\n            Join_Sound();\n        });\n    }, [Join_Sound]);\n\n    useEffect( () => {\n        socket.on('leaveSound', () => {\n            Leave_Sound();\n        });\n    }, [Leave_Sound]);\n\n    useEffect( () => {\n        socket.on('startSound', () => {\n            Start_Sound();\n        });\n    }, [Start_Sound]);\n\n\n\n\n    // Sending Messages\n    const sendMessage = (event) => {\n        event.preventDefault();\n        if(message.length === 0) return;\n        \n        if(message.toLowerCase() === guessWord.toLowerCase()){\n            socket.emit('correctGuess', users, () => setMessage(''));\n            setDisableChat(true);\n        } else{\n            socket.emit('sendMessage', message, () => setMessage(''));\n        }\n    }\n    //\n\n\n\n    // Drawing Canvas\n    const sendDrawing = (offsetX, offsetY) => {\n        socket.emit('mouse', offsetX, offsetY);\n    }\n\n    const sendMove = (offsetX, offsetY) => {\n        socket.emit('move', offsetX, offsetY);\n    }\n\n    const sendScale = (scale) => {\n        socket.emit('scale', scale);\n    }\n    //\n\n\n\n    // Timer (Start game)\n    const timerButtonClick = () => {\n        setDisableButton(true);\n        setInitialTime(roundTime.current);\n        setStartTimer(true);\n        socket.emit('clear');\n        socket.emit('timer');\n        socket.emit('startedGame');\n        socket.emit('getWord');\n    };\n    //\n\n\n    // When timer ends\n    useEffect( () => {\n        if(initialTime === 0 && startTimer){\n            setDisableChat(false);\n            setCanvasClear(true);\n            setStrokeColor(\"black\");\n            setInitialTime(roundTime.current);\n            socket.emit('updateUsers', userIndex.current, users);\n            \n            if(currentUser.host){\n                socket.emit('revealWord', guessWord);\n                socket.emit('removeFirstGuess');\n                socket.emit('getWord');\n            }\n        }\n\n        if(initialTime > 0){\n            timer.current = setTimeout( () => {\n                setInitialTime(initialTime - 1);\n            }, 1000);\n        }\n\n        // eslint-disable-next-line\n    }, [initialTime, startTimer, users, currentUser.host]);\n    //\n\n\n    const colorChange = (color) => {\n        setStrokeColor(color);\n        socket.emit('setColor', color);\n    };\n    //\n\n\n\n\n    return (\n        <div className=\"drawing-container\">\n            <MDBContainer className=\"drawing-inner-container\" fluid={true}>\n                <InfoBar currentUser={currentUser} room={room} initialTime={initialTime} currentDrawer={currentDrawer.name} guessWord={guessWord}/>\n\n                <MDBRow className=\"drawing-canvas-outer\">\n                    <Users currentUser={currentUser} users={users} />\n                    <Canvas strokeColor={strokeColor} sendDrawing={sendDrawing} sendMove={sendMove} userMove={userMove} userDraw={userDraw} sendScale={sendScale} userScale={userScale} currentUser={currentUser} canvasClear={canvasClear} />\n                    <Chat message={message} setMessage={setMessage} sendMessage={sendMessage} messages={messages} name={name} currentUser={currentUser} currentDrawer={currentDrawer.name} disableChat={disableChat}/>\n                </MDBRow>\n                {\n                    currentUser.host ? (\n                        <button className=\"drawing-button\" hidden={disableButton} onClick={timerButtonClick}>Start Game!</button>\n                    ) : null\n                }\n\n                {\n                    currentUser.name === currentDrawer.name && disableButton ? (\n                        <div>\n                            <div className={`dot black-dot`} onClick={() => colorChange('black')}></div>\n                            <span className={`dot white-dot`} onClick={() => colorChange('white')}></span>\n                            <span className={`dot red-dot`} onClick={() => colorChange('red')}></span>\n                            <span className={`dot blue-dot`} onClick={() => colorChange('blue')}></span>\n                            <span className={`dot green-dot`} onClick={() => colorChange('green')}></span>\n                            <span className={`dot yellow-dot`} onClick={() => colorChange('yellow')}></span>\n                            <span className=\"dot fill-color\" onClick={() => socket.emit('clear')}><MDBIcon icon=\"fill-drip\" size=\"3x\"/></span>\n                        </div>\n                    ) : null\n                }\n            </MDBContainer>\n        </div>\n    )\n};\n\nexport default DrawingPage;","import React, { useState, useEffect, useRef } from 'react';\nimport { Link } from 'react-router-dom';\nimport { MDBInput } from \"mdbreact\";\nimport 'animate.css';\n\nimport './Home.css';\n\nconst Home = () => {\n    const [name, setName] = useState('');\n    const [room, setRoom] = useState('');\n    const [joinBtn, setJoinBtn] = useState('Invite your Friends!');\n    const hostRoom = useRef(null);\n\n    useEffect( () => {\n        hostRoom.current = hostRoomString(6, '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ');\n    }, []);\n\n    useEffect( () => {\n        if(room){\n            setJoinBtn('Join your Friends!')\n        } else{\n            setJoinBtn('Invite your Friends!');\n        }\n    }, [room]);\n\n    const hostRoomString = (length, chars) => {\n        var result = '';\n        for (var i = length; i > 0; i--) result += chars[Math.floor(Math.random() * chars.length)];\n        return result;\n    }\n\n    return (\n        <div className=\"joinOuterContainer\">\n            <div className=\"joinInnerContainer\">\n                <h1 className=\"heading animate__animated animate__bounceInDown\">SkribbleGuess!</h1>\n                <div><MDBInput label=\"Name\" size=\"lg\" labelClass=\"md-outline\" type=\"text\" onChange={ (event) => setName(event.target.value) } /> </div>\n                <div><MDBInput label=\"Room (Leave blank to host)\" size=\"lg\" type=\"text\" onChange={ (event) => setRoom(event.target.value) } /> </div>\n                {\n                    room ? (\n                        <Link onClick={ event => (!name) ? event.preventDefault() : null} to={`/DrawingRoom?name=${name}&room=${room}`}>\n                            <button className=\"button button2\" type=\"submit\">{joinBtn}</button>\n                        \n                        </Link>\n                    ): (\n                        <Link onClick={ event => (!name) ? event.preventDefault() : null} to={`/DrawingRoom?name=${name}&room=${hostRoom.current}`}>\n                            <button className=\" button button2\" type=\"submit\">{joinBtn}</button>\n                            \n                        </Link>\n                    )\n                }\n            </div>\n        </div>\n    );\n};\n\nexport default Home;","export default __webpack_public_path__ + \"static/media/Kids_Cheering.8e637ca4.mp3\";","export default __webpack_public_path__ + \"static/media/Fail_1.e6f2c1b4.mp3\";","export default __webpack_public_path__ + \"static/media/Bell_Transition.8b9ffd44.mp3\";","export default __webpack_public_path__ + \"static/media/Whoosh_4.afe3b2c3.mp3\";","export default __webpack_public_path__ + \"static/media/Cartoon_Accent.37376bb8.mp3\";","export default __webpack_public_path__ + \"static/media/Pop_1.4ac14c70.mp3\";","export default __webpack_public_path__ + \"static/media/among-us-start-sound.41a9e555.mp3\";","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { MDBCol, MDBRow } from \"mdbreact\";\n\nimport './InfoBar.css';\n\nconst InfoBar = ({ currentUser, room, initialTime, currentDrawer, guessWord }) => {\n\n\n    return (\n        <MDBRow className=\"drawing-info\">\n            <MDBCol><h3>Room: {room}</h3></MDBCol>\n            {\n                currentUser.name === currentDrawer ? (\n                    <MDBCol><h3>✏️ <span className=\"current-drawer\">You!</span></h3></MDBCol>\n                ) : (\n                    <MDBCol><h3>✏️ {currentDrawer}</h3></MDBCol>\n                )\n            }\n\n            {\n                currentUser.name === currentDrawer ? (\n                    <MDBCol><h3><span className=\"guess-word multicolortext\">{guessWord}</span></h3></MDBCol>\n                ): (\n                    <MDBCol><h3><pre>{guessWord.replace(/\\S/gm, \"__ \")}</pre></h3></MDBCol>\n                )\n            }\n            <MDBCol><h2>⏱️: <span>{initialTime}</span></h2></MDBCol>\n            <MDBCol>\n                <Link to={'/'}>\n                    <button className=\"leave-button\">Leave Game</button> \n                </Link>\n            </MDBCol>\n        </MDBRow>\n    )\n};\n\nexport default InfoBar;","import React from 'react';\nimport { MDBCol, MDBIcon } from \"mdbreact\";\nimport ScrollToBottom from 'react-scroll-to-bottom';\n\nimport './Users.css';\n\nconst Users = ({ currentUser, users }) => {\n\n    return (\n        <MDBCol className=\"drawing-users-column\" size=\"3\">\n            <div className=\"drawing-users\">\n                <h1 className=\"users-title\">Users</h1>\n                <ScrollToBottom className=\"users-scroll\">\n                    {\n                        users\n                            ? (\n                            <div>\n                                {users.map(({ name, points }) => (\n                                    name === currentUser.name ?\n                                        <div key={name} className=\"activeItem\">\n                                            <h3 className=\"mb-3 font-user current-user-users\"><MDBIcon icon=\"check\" className=\"indigo-text\"/>&nbsp; {name}: {points} pts</h3>\n                                        </div>\n                                    :\n                                        <div key={name} className=\"activeItem\">\n                                            <h3 className=\"mb-3 font-user\">&nbsp; {name}: {points} pts</h3>\n                                        </div>\n                                ))}\n                            </div>\n                            ) : null\n                    }\n                </ScrollToBottom>\n            </div>\n        </MDBCol>\n    )\n};\n\nexport default Users;","import React, {useState, useEffect, useRef } from 'react';\nimport { MDBCol } from \"mdbreact\";\n\nimport './Canvas.css';\n\nconst Canvas = ({ strokeColor, sendDrawing, sendMove, userMove, userDraw, sendScale, userScale, currentUser, canvasClear }) => {\n\n    const canvasRef = useRef(null);\n    const contextRef = useRef(null);\n    const scale = useRef(null);\n    const [isDrawing, setIsDrawing] = useState(false);\n\n    useEffect( () => {\n        const canvas = canvasRef.current;\n        canvas.width = canvas.parentNode.offsetWidth-25;\n        canvas.height = canvas.parentNode.offsetHeight;\n        canvas.style.width = `${canvas.parentNode.offsetWidth-25}px`;\n        canvas.style.height = `${canvas.parentNode.offsetHeight}px`;\n\n        const context = canvas.getContext(\"2d\");\n        context.lineCap = \"round\";\n        context.strokeStyle = \"blue\";\n        context.lineWidth = 5;\n        contextRef.current = context;\n    }, []);\n\n    useEffect( () => {\n        contextRef.current.beginPath();\n        contextRef.current.strokeStyle = strokeColor;\n    }, [strokeColor]);\n\n    useEffect( () => {\n        if(canvasClear){\n            contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n            finishDrawing();\n        }\n    }, [canvasClear]);\n\n\n    useEffect( () => {\n        scale.current = canvasRef.current.width / userScale;\n    }, [userScale])\n\n    useEffect( () => {\n        const {x, y} = userDraw;\n        contextRef.current.lineTo(x * scale.current, y * scale.current);\n        contextRef.current.stroke();\n    }, [userDraw])\n\n    useEffect( () => {\n        const {x, y} = userMove;\n        contextRef.current.moveTo(x * scale.current, y * scale.current);\n    }, [userMove])\n\n\n    const startDrawing = ({ nativeEvent }) => {\n        contextRef.current.beginPath();\n        const {offsetX, offsetY} = nativeEvent;\n        contextRef.current.moveTo(offsetX, offsetY);\n        setIsDrawing(true);\n        sendScale(canvasRef.current.width);\n        sendMove(offsetX, offsetY);\n    }\n\n\n    const draw = ({ nativeEvent }) => {\n        const {offsetX, offsetY} = nativeEvent;\n        if(!isDrawing){\n            return;\n        }\n        contextRef.current.lineTo(offsetX, offsetY);\n        contextRef.current.stroke();\n        sendDrawing(offsetX, offsetY);\n    }\n\n\n    const finishDrawing = () => {\n        contextRef.current.beginPath();\n        setIsDrawing(false);\n    }\n\n    \n    return (\n        <MDBCol className=\"canvas-col\" size=\"6\">\n            {\n                currentUser.isDrawing ? (\n                    <canvas \n                        className=\"drawing-canvas b-black\"\n                        onMouseDown={startDrawing}\n                        onMouseMove={draw}\n                        onMouseUp={finishDrawing}\n                        ref={canvasRef}\n                    />\n                ): (\n                    <canvas className=\"drawing-canvas b-black\" ref={canvasRef}/>\n                )\n            }\n        </MDBCol>\n    )\n};\n\nexport default Canvas;","import React from 'react';\n\nimport './Message.css';\n\nconst Message = ({ message: {user, text}, name }) => {\n    \n    let isSentByCurrentUser = false;\n    const trimmedName = name.trim().toLowerCase();\n\n    if(user === trimmedName){\n        isSentByCurrentUser = true;\n    }\n\n    return (\n        isSentByCurrentUser\n        ? (\n            <div className=\"messageContainer justifyStart\">\n                <p className=\"pr-10 messageText\"><span className=\"sentText-from\">{user}</span>: {text}</p>\n            </div>\n        ) : (\n            <div className=\"messageContainer justifyStart\">\n                <p className=\"pr-10 messageText\"><span className=\"sentText-to\">{user}</span>: {text}</p>\n            </div>\n        )\n    )\n};\n\nexport default Message;","import React from 'react';\nimport { MDBCol } from \"mdbreact\";\nimport ScrollToBottom from 'react-scroll-to-bottom';\n\nimport Message from './Message/Message';\nimport './Chat.css';\n\nconst Chat = ({ message, setMessage, sendMessage, messages, name, currentUser, currentDrawer, disableChat }) => {\n\n\n    return (\n        <MDBCol className=\"drawing-chat-column\" size=\"3\">\n            <div className=\"drawing-chat\">\n                <h1 className=\"chat-title\">Chat</h1>\n\n                <ScrollToBottom className=\"messages\">\n                    {messages.map( (message, index) => <div key={index}><Message message={message} name={name}/></div>)}\n                </ScrollToBottom>\n                {\n                    currentUser.name === currentDrawer || disableChat ? (\n                        <form className=\"form\">\n                            <input className=\"input no-input\"\n                                readOnly\n                                type=\"text\"\n                                placeholder=\"Please wait...\"\n                                value={message}\n                                onChange={ (event) => setMessage(event.target.value)}\n                                onKeyPress={ (event) => event.key === 'Enter' ? sendMessage(event) : null} \n                            />\n                        </form>\n                    ): (\n                        <form className=\"form\">\n                            <input className=\"input\"\n                                type=\"text\"\n                                placeholder=\"Guess the drawing!\"\n                                value={message}\n                                onChange={ (event) => setMessage(event.target.value)}\n                                onKeyPress={ (event) => event.key === 'Enter' ? sendMessage(event) : null} \n                            />\n                        </form>\n                    )\n                }\n            </div>\n        </MDBCol>\n    )\n};\n\nexport default Chat;","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport Home from './components/Home/Home';\nimport DrawingPage from './components/DrawingRoom/DrawingPage/DrawingPage';\n\nconst App = () => {\n    return (\n        <Router>\n            <Route path=\"/\" exact component={Home} />\n            <Route path=\"/DrawingRoom\" component={DrawingPage} />\n        </Router>\n    );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}